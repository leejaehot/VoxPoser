Executing instruction: leave the pan open
*** OpenAI API call took 3.15s ***
########################################
## "planner" generated code
## context: "objects = ['saucepan', 'saucepan_lid']"
########################################
objects = ['saucepan', 'saucepan_lid']
# Query: leave the pan open.
composer("grasp the saucepan_lid")
composer("back to default pose")
composer("move to 10cm to the right of the saucepan")
composer("open gripper")
composer("back to default pose")
# done


*** OpenAI API call took 3.58s ***
########################################
## "composer" generated code
########################################
# Query: grasp the saucepan_lid.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point at the center of the saucepan_lid')
gripper_map = get_gripper_map('open everywhere except 1cm around the saucepan_lid')
execute(movable, affordance_map=affordance_map, gripper_map=gripper_map)


*** OpenAI API call took 1.20s ***
########################################
## "parse_query_obj" generated code
## context: "objects = ['saucepan', 'saucepan_lid']"
########################################
objects = ['saucepan', 'saucepan_lid']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


*** OpenAI API call took 3.75s ***
########################################
## "get_affordance_map" generated code
########################################
# Query: a point at the center of the saucepan_lid.
affordance_map = get_empty_affordance_map()
saucepan_lid = parse_query_obj('saucepan_lid')
x, y, z = saucepan_lid.position
affordance_map[x, y, z] = 1
ret_val = affordance_map


*** OpenAI API call took 4.29s ***
########################################
## "get_gripper_map" generated code
########################################
# Query: open everywhere except 1cm around the saucepan_lid.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
# close when 1cm around the saucepan_lid
saucepan_lid = parse_query_obj('saucepan_lid')
set_voxel_by_radius(gripper_map, saucepan_lid.position, radius_cm=1, value=0)
ret_val = gripper_map


*** OpenAI API call took 1.44s ***
########################################
## "parse_query_obj" generated code
## context: "objects = ['saucepan', 'saucepan_lid']"
########################################
objects = ['saucepan', 'saucepan_lid']
# Query: saucepan_lid.
saucepan_lid = detect('saucepan_lid')
ret_val = saucepan_lid


(using cache) *** OpenAI API call took 0.00s ***
########################################
## "parse_query_obj" generated code
## context: "objects = ['saucepan', 'saucepan_lid']"
########################################
objects = ['saucepan', 'saucepan_lid']
# Query: saucepan_lid.
saucepan_lid = detect('saucepan_lid')
ret_val = saucepan_lid


[planners.py | 1:6:56.543] start
[planners.py | 1:6:56.686] start optimizing, start_pos: [52 49 71]
[planners.py | 1:6:57.50] optimization finished; path length: 301
[planners.py | 1:6:57.56] after postprocessing, path length: 30
[planners.py | 1:6:57.58] last waypoint: [52. 62.  8.]
[interfaces.py | 1:6:57] planner time: 0.520s
[interfaces.py | 1:6:57] overwriting gripper to less common value for the last waypoint
** saving visualization to ./visualizations/1:6:57.html ...
** saving visualization to ./visualizations/latest.html ...
** save to ./visualizations/1:6:57.html
[interfaces.py | 1:6:59] start executing path via controller (32 waypoints)
[interfaces.py | 1:6:59] completed waypoint 1 (wp: [ 0.277 -0.018  1.469], actual: [ 0.277 -0.017  1.469], target: [0.277 0.165 0.833], start: [ 0.277 -0.018  1.469], dist2target: 0.662)
[interfaces.py | 1:7:0] completed waypoint 2 (wp: [0.277 0.022 1.449], actual: [0.277 0.021 1.448], target: [0.277 0.165 0.833], start: [ 0.277 -0.018  1.469], dist2target: 0.632)
[interfaces.py | 1:7:0] completed waypoint 3 (wp: [0.277 0.055 1.429], actual: [0.277 0.055 1.428], target: [0.277 0.165 0.833], start: [ 0.277 -0.018  1.469], dist2target: 0.606)
[interfaces.py | 1:7:0] completed waypoint 4 (wp: [0.277 0.084 1.409], actual: [0.277 0.083 1.408], target: [0.277 0.165 0.833], start: [ 0.277 -0.018  1.469], dist2target: 0.581)
[interfaces.py | 1:7:1] completed waypoint 5 (wp: [0.277 0.107 1.388], actual: [0.277 0.107 1.388], target: [0.277 0.165 0.833], start: [ 0.277 -0.018  1.469], dist2target: 0.558)
[interfaces.py | 1:7:1] completed waypoint 6 (wp: [0.277 0.126 1.368], actual: [0.277 0.125 1.368], target: [0.277 0.165 0.833], start: [ 0.277 -0.018  1.469], dist2target: 0.537)
[interfaces.py | 1:7:1] completed waypoint 7 (wp: [0.277 0.141 1.348], actual: [0.277 0.14  1.348], target: [0.277 0.165 0.833], start: [ 0.277 -0.018  1.469], dist2target: 0.515)
[interfaces.py | 1:7:2] completed waypoint 8 (wp: [0.277 0.152 1.328], actual: [0.277 0.152 1.327], target: [0.277 0.165 0.833], start: [ 0.277 -0.018  1.469], dist2target: 0.495)
[interfaces.py | 1:7:2] completed waypoint 9 (wp: [0.277 0.16  1.308], actual: [0.277 0.16  1.308], target: [0.277 0.165 0.833], start: [ 0.277 -0.018  1.469], dist2target: 0.475)
[interfaces.py | 1:7:2] completed waypoint 10 (wp: [0.277 0.165 1.287], actual: [0.277 0.165 1.288], target: [0.277 0.165 0.833], start: [ 0.277 -0.018  1.469], dist2target: 0.455)
[interfaces.py | 1:7:3] completed waypoint 11 (wp: [0.277 0.171 1.257], actual: [0.276 0.171 1.257], target: [0.277 0.165 0.833], start: [ 0.277 -0.018  1.469], dist2target: 0.424)
[interfaces.py | 1:7:3] completed waypoint 12 (wp: [0.277 0.172 1.237], actual: [0.276 0.172 1.237], target: [0.277 0.165 0.833], start: [ 0.277 -0.018  1.469], dist2target: 0.404)
[interfaces.py | 1:7:3] completed waypoint 13 (wp: [0.277 0.172 1.217], actual: [0.276 0.172 1.217], target: [0.277 0.165 0.833], start: [ 0.277 -0.018  1.469], dist2target: 0.384)
[interfaces.py | 1:7:4] completed waypoint 14 (wp: [0.277 0.17  1.196], actual: [0.276 0.17  1.197], target: [0.277 0.165 0.833], start: [ 0.277 -0.018  1.469], dist2target: 0.364)
[interfaces.py | 1:7:4] completed waypoint 15 (wp: [0.277 0.168 1.176], actual: [0.277 0.168 1.176], target: [0.277 0.165 0.833], start: [ 0.277 -0.018  1.469], dist2target: 0.343)
[interfaces.py | 1:7:4] completed waypoint 16 (wp: [0.277 0.166 1.156], actual: [0.277 0.166 1.156], target: [0.277 0.165 0.833], start: [ 0.277 -0.018  1.469], dist2target: 0.323)
[interfaces.py | 1:7:5] completed waypoint 17 (wp: [0.277 0.165 1.136], actual: [0.277 0.165 1.136], target: [0.277 0.165 0.833], start: [ 0.277 -0.018  1.469], dist2target: 0.303)
[interfaces.py | 1:7:5] completed waypoint 18 (wp: [0.277 0.165 1.116], actual: [0.277 0.165 1.116], target: [0.277 0.165 0.833], start: [ 0.277 -0.018  1.469], dist2target: 0.283)
[interfaces.py | 1:7:5] completed waypoint 19 (wp: [0.276 0.165 1.095], actual: [0.276 0.165 1.095], target: [0.277 0.165 0.833], start: [ 0.277 -0.018  1.469], dist2target: 0.263)
[interfaces.py | 1:7:5] completed waypoint 20 (wp: [0.276 0.165 1.074], actual: [0.276 0.165 1.074], target: [0.277 0.165 0.833], start: [ 0.277 -0.018  1.469], dist2target: 0.241)
[interfaces.py | 1:7:6] completed waypoint 21 (wp: [0.275 0.165 1.052], actual: [0.275 0.165 1.052], target: [0.277 0.165 0.833], start: [ 0.277 -0.018  1.469], dist2target: 0.219)
[interfaces.py | 1:7:6] completed waypoint 22 (wp: [0.273 0.165 1.031], actual: [0.273 0.165 1.031], target: [0.277 0.165 0.833], start: [ 0.277 -0.018  1.469], dist2target: 0.198)
[interfaces.py | 1:7:6] completed waypoint 23 (wp: [0.272 0.165 1.01 ], actual: [0.272 0.165 1.01 ], target: [0.277 0.165 0.833], start: [ 0.277 -0.018  1.469], dist2target: 0.177)
[interfaces.py | 1:7:7] completed waypoint 24 (wp: [0.271 0.165 0.989], actual: [0.271 0.165 0.989], target: [0.277 0.165 0.833], start: [ 0.277 -0.018  1.469], dist2target: 0.157)
[interfaces.py | 1:7:7] completed waypoint 25 (wp: [0.269 0.165 0.97 ], actual: [0.269 0.165 0.97 ], target: [0.277 0.165 0.833], start: [ 0.277 -0.018  1.469], dist2target: 0.138)
[interfaces.py | 1:7:7] completed waypoint 26 (wp: [0.268 0.165 0.954], actual: [0.268 0.165 0.955], target: [0.277 0.165 0.833], start: [ 0.277 -0.018  1.469], dist2target: 0.122)
[interfaces.py | 1:7:8] completed waypoint 27 (wp: [0.267 0.166 0.941], actual: [0.267 0.166 0.941], target: [0.277 0.165 0.833], start: [ 0.277 -0.018  1.469], dist2target: 0.109)
[interfaces.py | 1:7:8] completed waypoint 28 (wp: [0.266 0.166 0.928], actual: [0.266 0.166 0.928], target: [0.277 0.165 0.833], start: [ 0.277 -0.018  1.469], dist2target: 0.096)
[interfaces.py | 1:7:8] completed waypoint 29 (wp: [0.264 0.167 0.919], actual: [0.264 0.167 0.919], target: [0.277 0.165 0.833], start: [ 0.277 -0.018  1.469], dist2target: 0.088)
[interfaces.py | 1:7:9] completed waypoint 30 (wp: [0.277 0.165 0.833], actual: [0.281 0.168 0.841], target: [0.277 0.165 0.833], start: [ 0.277 -0.018  1.469], dist2target: 0.009)
[interfaces.py | 1:7:9] reached last waypoint; curr_xyz=[0.28110471 0.16830476 0.84059513], target=[0.27651513 0.16540402 0.83280796] (distance: 0.009))
[interfaces.py | 1:7:9] reached target; terminating 
[interfaces.py | 1:7:9] finished executing path via controller
(using cache) *** OpenAI API call took 0.00s ***
########################################
## "composer" generated code
########################################
# Query: back to default pose.
reset_to_default_pose()


*** OpenAI API call took 3.02s ***
########################################
## "composer" generated code
########################################
# Query: move to 10cm to the right of the saucepan.
movable = parse_query_obj('gripper')
affordance_map = get_affordance_map('a point 10cm to the right of the saucepan')
execute(movable, affordance_map=affordance_map)


(using cache) *** OpenAI API call took 0.00s ***
########################################
## "parse_query_obj" generated code
## context: "objects = ['saucepan', 'saucepan_lid']"
########################################
objects = ['saucepan', 'saucepan_lid']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


*** OpenAI API call took 6.09s ***
########################################
## "get_affordance_map" generated code
########################################
# Query: a point 10cm to the right of the saucepan.
affordance_map = get_empty_affordance_map()
saucepan = parse_query_obj('saucepan')
(min_x, min_y, min_z), (max_x, max_y, max_z) = saucepan.aabb
center_x, center_y, center_z = saucepan.position
# 10cm to the right of so we add to y-axis
x = center_x
y = max_y + cm2index(10, 'y')
z = center_z
affordance_map[x, y, z] = 1
ret_val = affordance_map


*** OpenAI API call took 1.46s ***
########################################
## "parse_query_obj" generated code
## context: "objects = ['saucepan', 'saucepan_lid']"
########################################
objects = ['saucepan', 'saucepan_lid']
# Query: saucepan.
saucepan = detect('saucepan')
ret_val = saucepan


[planners.py | 1:7:21.700] start
[planners.py | 1:7:21.854] start optimizing, start_pos: [52 60 20]
[planners.py | 1:7:22.219] optimization finished; path length: 301
[planners.py | 1:7:22.224] after postprocessing, path length: 12
[planners.py | 1:7:22.226] last waypoint: [56. 77. 18.]
[interfaces.py | 1:7:22] planner time: 0.530s
** saving visualization to ./visualizations/1:7:22.html ...
** saving visualization to ./visualizations/latest.html ...
** save to ./visualizations/1:7:22.html
[interfaces.py | 1:7:24] start executing path via controller (14 waypoints)
[interfaces.py | 1:7:24] completed waypoint 1 (wp: [0.287 0.125 0.968], actual: [0.281 0.135 0.956], target: [0.319 0.364 0.934], start: [0.287 0.125 0.968], dist2target: 0.233)
[interfaces.py | 1:7:25] completed waypoint 2 (wp: [0.298 0.164 0.979], actual: [0.281 0.136 0.956], target: [0.319 0.364 0.934], start: [0.287 0.125 0.968], dist2target: 0.232)
[interfaces.py | 1:7:25] completed waypoint 3 (wp: [0.306 0.198 0.987], actual: [0.281 0.136 0.956], target: [0.319 0.364 0.934], start: [0.287 0.125 0.968], dist2target: 0.232)
[interfaces.py | 1:7:25] completed waypoint 4 (wp: [0.312 0.229 0.993], actual: [0.281 0.137 0.955], target: [0.319 0.364 0.934], start: [0.287 0.125 0.968], dist2target: 0.231)
[interfaces.py | 1:7:25] completed waypoint 5 (wp: [0.317 0.257 0.995], actual: [0.281 0.138 0.955], target: [0.319 0.364 0.934], start: [0.287 0.125 0.968], dist2target: 0.23)
[interfaces.py | 1:7:25] completed waypoint 6 (wp: [0.32  0.282 0.996], actual: [0.281 0.139 0.955], target: [0.319 0.364 0.934], start: [0.287 0.125 0.968], dist2target: 0.229)
[interfaces.py | 1:7:26] completed waypoint 7 (wp: [0.322 0.303 0.995], actual: [0.281 0.14  0.955], target: [0.319 0.364 0.934], start: [0.287 0.125 0.968], dist2target: 0.228)
[interfaces.py | 1:7:26] completed waypoint 8 (wp: [0.323 0.321 0.992], actual: [0.281 0.141 0.955], target: [0.319 0.364 0.934], start: [0.287 0.125 0.968], dist2target: 0.227)
[interfaces.py | 1:7:26] completed waypoint 9 (wp: [0.323 0.337 0.989], actual: [0.281 0.141 0.955], target: [0.319 0.364 0.934], start: [0.287 0.125 0.968], dist2target: 0.227)
[interfaces.py | 1:7:26] completed waypoint 10 (wp: [0.322 0.35  0.985], actual: [0.281 0.142 0.954], target: [0.319 0.364 0.934], start: [0.287 0.125 0.968], dist2target: 0.226)
[interfaces.py | 1:7:26] completed waypoint 11 (wp: [0.319 0.364 0.978], actual: [0.281 0.143 0.954], target: [0.319 0.364 0.934], start: [0.287 0.125 0.968], dist2target: 0.225)
[interfaces.py | 1:7:26] completed waypoint 12 (wp: [0.319 0.364 0.934], actual: [0.281 0.144 0.954], target: [0.319 0.364 0.934], start: [0.287 0.125 0.968], dist2target: 0.224)
[interfaces.py | 1:7:26] completed waypoint 13 (wp: [0.319 0.364 0.934], actual: [0.281 0.144 0.954], target: [0.319 0.364 0.934], start: [0.287 0.125 0.968], dist2target: 0.224)
[interfaces.py | 1:7:27] completed waypoint 14 (wp: [0.319 0.364 0.934], actual: [0.281 0.144 0.954], target: [0.319 0.364 0.934], start: [0.287 0.125 0.968], dist2target: 0.224)
[interfaces.py | 1:7:27] finished executing path via controller
(using cache) *** OpenAI API call took 0.00s ***
########################################
## "composer" generated code
########################################
# Query: open gripper.
movable = parse_query_obj('gripper')
gripper_map = get_gripper_map('open everywhere')
execute(movable, gripper_map=gripper_map)


(using cache) *** OpenAI API call took 0.00s ***
########################################
## "parse_query_obj" generated code
## context: "objects = ['saucepan', 'saucepan_lid']"
########################################
objects = ['saucepan', 'saucepan_lid']
# Query: gripper.
gripper = detect('gripper')
ret_val = gripper


(using cache) *** OpenAI API call took 0.00s ***
########################################
## "get_gripper_map" generated code
########################################
# Query: open everywhere.
gripper_map = get_empty_gripper_map()
# open everywhere
gripper_map[:, :, :] = 1
ret_val = gripper_map


[interfaces.py | 1:7:27] finished executing path via controller
(using cache) *** OpenAI API call took 0.00s ***
########################################
## "composer" generated code
########################################
# Query: back to default pose.
reset_to_default_pose()


